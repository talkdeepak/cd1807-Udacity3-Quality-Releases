name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise, comment out the line below. 
pool: UdacityDevOps2AgentPool

variables:
  python.version: '3.7.6'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'Project3UdacityServConnNew'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'QualityReleasesProject3'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    #--------------------------------------------#
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.3.9'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformTaskV3@3
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'Azuredev'
        backendAzureRmStorageAccountName: 'tfstate30907257'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    - task: TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 

    
    # Run Terraform Apply
    - task: TerraformTaskV3@3
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

#--------------------------------------------#    
    # Postman - Install Newman    
    # ToDo: Update the command and verify the working directory
    - task: CmdLine@2
      displayName: Install npm
      inputs:
        script: 'sudo apt-get -y install npm'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    # Postman Data Validation Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run Data_Validation.postman_collection.json -e Udacity.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
    # Postman Regression Test Suite    
    # ToDo: Verify the working directory
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run Regression_Tests.postman_collection.json -e Udacity.postman_environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
    # Postman - Publish Results 
    # ToDo: Complete the task as explained here: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=azure-devops&tabs=trx%2Cyaml#yaml-snippet
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder:     $(System.DefaultWorkingDirectory)/automatedtesting/postman  # ToDo
        mergeTestResults: true
        testRunTitle: 'Postman tests'      # ToDo

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # "ArchiveFiles@2" picks up the web package and archives it.
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip   # Same as the archiveFile artifact above. 
      displayName: 'Upload Selenium Package'
      artifact: drop-uitests
      
    - publish: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py'
      displayName: 'Upload UI Test Suite1'
      artifact: ui-test   

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: 
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    # ToDo: Complete the ArchiveFiles@2 task and publish step 
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Fake Rest API Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload JMeter Package'
      artifact: drop-perftests

          
#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI  
    environment: QualityReleasesProject3   
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'    
              appName: 'Udacity3App-AppService'               
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip   
          #--------------------------------------------#    
          # Run JMeter test suite against the App Service
          - task: CmdLine@2
            displayName: 'Performance tests'
            inputs:
              script: |
                sudo apt-get update -y
                sudo apt-get install default-jre-headless -y
                curl -O https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.5.tgz
                tar xzvf apache-jmeter-5.5.tgz
                mkdir -p testing/jmeter

                unzip -o $(Build.BuildId)-perftests.zip -d testing/jmeter
               
                mkdir -p log/endurance
                ./apache-jmeter-5.5/bin/jmeter -n -t testing/jmeter/EnduranceTest.jmx -l EnduranceTestResult.csv -e -f -o log/endurance -j log/endurance/endurance-test.log

                mkdir -p log/stress
                ./apache-jmeter-5.5/bin/jmeter -n -t testing/jmeter/StressTest.jmx -l StressTestResult.csv -e -f -o log/stress -j log/stress/stress-test.log
                
              workingDirectory: $(Pipeline.Workspace)/drop-perftests
              
  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  # ToDo: 
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment: 
      name:   QualityReleasesProject3
      resourceType: VirtualMachine
    strategy:
        runOnce:
          deploy:
            steps:
            - bash: |
                sudo apt update
                sudo apt install software-properties-common -y
                sudo apt-add-repository ppa:universe -y
                sudo apt-get update
                sudo apt-get install zip unzip -y
                sudo apt-get install -y chromium-browser
                sudo apt-get install -y chromium-chromedriver
                sudo apt-get install python3-pip -y
                sudo python3 -m pip install --upgrade pip
                sudo wget https://files.pythonhosted.org/packages/ed/9c/9030520bf6ff0b4c98988448a93c04fcbd5b13cd9520074d8ed53569ccfe/selenium-3.141.0.tar.gz
                sudo tar -zxvf selenium-3.141.0.tar.gz
                cd selenium-3.141.0/
                sudo python3 setup.py install
                sudo python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"
                cd $(Pipeline.Workspace)/selenium
                find . -type f ! -name 'selenium-$(Build.BuildId).zip' -delete 
                unzip -o $(Pipeline.Workspace)/selenium/selenium-$(Build.BuildId) -d .
                sudo mkdir -p /var/logs/selenium && sudo chmod 664 /var/logs/selenium
                #sudo python3 -u login.py 2>&1 | sudo tee -a /var/logs/selenium/ui_tests.log
                sudo python3 -u login.py | sudo dd of=/var/logs/selenium/ui_tests.log
                cd $(System.DefaultWorkingDirectory)
                mkdir -p logs/selenium
                sudo cp /var/logs/selenium/ui_tests.log logs/selenium/ui_tests.log
                sudo chmod 775 logs/selenium/ui_tests.log
                cat logs/selenium/ui_tests.log
              displayName: Execute UI functional tests using Selenium
            - task: PublishPipelineArtifact@1
              displayName: Publish logs from Selenium tests
              inputs:
                targetPath: '$(System.DefaultWorkingDirectory)/logs/selenium/ui_tests.log'
                artifactName: 'selenium-logs-atf'